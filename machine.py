# -*- coding: utf-8 -*-
"""Machine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DfjHLcZaAQY25NlEDjAMUXMw2tgpL3k2
"""

#CSV file need to be Loaded Locally or mounted from Google Drive

#Identifying Countries available in both dataset
import pandas as pd
tmp=pd.read_csv('/content/drive/MyDrive/ML data/tmpdata.csv')
df=pd.read_csv('/content/drive/MyDrive/ML data/emdata.csv')
country=set()
#cnt2=set()
count=0
for i in range(len(df)):
  country.add(df.loc[i,'Country']) 
for i in range(1,len(tmp),2400):
 #cnt2.add(tmp.loc[i,'Country'])    
 if tmp.loc[i,'Country'] in country :
    count+=1
    print(tmp.loc[i,'Country'])
    country.remove(tmp.loc[i,'Country'])
print(count)

#print(len(cnt2))

#reading emmision from Emmision Dataset since 1750
import tensorflow as tf
import pandas as pd
import io
#Referenece DataSet :  https://www.kaggle.com/datasets/ankanhore545/carbon-dioxide-emissions-of-the-world/discussion
df=pd.read_csv('/content/drive/MyDrive/ML data/emdata.csv')
#Choosing Destination Country
Country='India'
mldt={}
year=[]
emmision=[]
for i in range(len(df)):
   if(df.loc[i,'Country']==Country) :
          for j in range(1751,2018):
                if(df.loc[i,str(j)]!=0):
                  temp=df.loc[i,str(j)]  
                  year.append(j)
                  mp=[]
                  mp.append(temp)
                  mldt[j]=mp
                  emmision.append(df.loc[i,str(j)])

#plotting 1/12th Sample Size of Emmision Data 
import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array(year[::12])
ypoints = np.array(emmision[::12])
plt.xlabel("Year")
plt.ylabel("Annual Green House Gas Emmision in Tons 1750-2017")
plt.plot(xpoints, ypoints)
plt.show()

#Linear Regression Model 1 predicting emmision based on year
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

emx=np.array(year).reshape(-1, 1)
emt=np.array(emmision).reshape(-1,1)
x_train, x_test, y_train, y_test = train_test_split(emx, emt, test_size = 0.6)
regr = LinearRegression()
regr.fit(x_train, y_train)
# predicts the reliability of data set 
print(regr.score(x_test, y_test))

#2035 is set as target year 
#and predicted emmision is stored in a variable 
predemmsion=regr.predict([[2035]])
print(float(predemmsion))

#Reading Annual Country Temperature in `C since 1750 
import tensorflow as tf
import pandas as pd
import io
import math
#reference Data Set : https://www.kaggle.com/datasets/berkeleyearth/climate-change-earth-surface-temperature-data
tmp=pd.read_csv('/content/drive/MyDrive/ML data/tmpdata.csv')
tyear=[]
tmplst=[]
mlemm=[]
mltmp=[]
#Temperature Data is read and if the data for emmision of the year is available ,both are inserted in Regression Dataset mlemm(emmision) and mltmp(temperature)
for i in range(1,len(tmp),12):
   if(tmp.loc[i,'Country']==Country) :
                if(tmp.loc[i,'AverageTemperature']!=0):
                  if(int(tmp.loc[i,'dt'][0:4]) in mldt.keys()):
                    mldt[int(tmp.loc[i,'dt'][0:4])].append((tmp.loc[i,'AverageTemperature']))
                    if (not math.isnan(float(tmp.loc[i,'AverageTemperature']) )):
                      mlemm.append(float(mldt[int(tmp.loc[i,'dt'][0:4])][0]))
                      mltmp.append(float(tmp.loc[i,'AverageTemperature']))
                    #checks if data set entry is null and prevents non-numeric data value in the Model   
                  tyear.append(tmp.loc[i,'dt'][0:4])
                  tmplst.append(str(tmp.loc[i,'AverageTemperature']))

#plotting available data set of 1/16 sample size [Constraint : graph readability] 
xpoints = np.array(tyear[::16])
ypoints = np.array(tmplst[::16])
plt.xlabel("Year")
plt.ylabel("Annual Temperature in 'C   [1750-2017]")
plt.plot(xpoints, ypoints)
plt.show()

#Linear Regression Model 2 : Predicting temperature based on Emmision prediction of Model 1
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

emx=np.array(mlemm[::2]).reshape(-1, 1)
emt=np.array(mltmp[::2]).reshape(-1,1)
x_train, x_test, y_train, y_test = train_test_split(emx, emt, test_size = 0.7)
regr = LinearRegression()
regr.fit(x_train, y_train)
#prints Prediction reliablitiy of DataSet Model
print(regr.score(x_test, y_test))

#Predicting temperature based on Emmision prediction of Regression
# Model 1 from Regression Model 2 and storing it in a variable 
fin=regr.predict(predemmsion)
print(float(fin))